#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('social-dj:server');
var http = require('http');
var models = require("../models");
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server and socket
 */

var server = http.createServer(app);
var io = require('socket.io')(server);

/**
 * Listen on provided port, on all network interfaces.
 */

 // socket listern modules
 var listners = require('../bin/socket_listeners.js');


models.sequelize.sync().then(function () {

  server.listen(port, function() {
    console.log('Server listening on port ' + port + '...');
  });
  server.on('error', onError);
  server.on('listening', onListening);

  io.on('connection', function(socket) {
    console.log('user connected');

    socket.on('disconnect', function() {
      console.log('user disconnected');
    });

    socket.on('new song', function(obj) {
      if(obj.song){
        // console.log(obj);
        models.song.findAll({
          where: {
            spotify_id: obj.song.id,
            partyId: obj.partyId,
            cookie: obj.cookie
          }
        }).then(function(response) {
          console.log(response,"logging the response of the data query!", obj.song.id);
          if (response.length === 0) {
            models.song_archive.create({
              song_id: obj.song.id,
              song_name: obj.song.name,
              party_id: obj.partyId,
              voteCount: 0
            });
            models.song.create({
              title: obj.song.name,
              album: obj.song.album,
              artist: obj.song.artist,
              voteCount: 0,
              img_url: "",
              spotify_id: obj.song.id,
              partyId: obj.partyId,
              cookie: obj.cookie
            }).then(function(song) {
              io.emit('new songed', song);
            });
          }
          else {
            console.log(response[0].cookie,"the response cookie");
            var song = response[0];

            if (response[0].cookie === 0){
              song.increment('voteCount').then(function(resp) {
                io.emit('new songed', song);
              });
            }else{
              console.log("rejected!!!!!!!");
            }
            // Vote for the song
          }
        });
      } else {
        io.emit('error');
      }
    });

    socket.on('new vote',function(obj){
      console.log(obj);
      models.vote.findAll({
        where:{
          songId: obj.song,
          partyId: obj.party,
          cookie: obj.cookie
        }
      }).then(function(response){
        if (response.length === 0){
          console.log(obj.party,obj.song,obj.spotifyId,"==============");
          models.vote.create({
            partyId: obj.party,
            songId: obj.song,
            cookie: obj.cookie
          });
          models.song.findAll({
            where: {
            id: obj.song,
            partyId: obj.party
            }
          }).then(function(response){
              var song = response[0];

              if (song) {
                models.song_archive.findAll({
                  where: {
                  song_id: obj.spotifyId,
                  party_id: obj.party
                }
                }).then(function(data){
                  var arc_song = data[0];
                  arc_song.increment('voteCount');
                });

                song.increment('voteCount').then(function(res){
                io.emit('new voted',res);
                });

              }
          });

        } else{
          console.log("already voted!");
        }
      });
    });

    socket.on('now playing',function(playing){
      io.emit('now played',playing);
    });

    socket.on('delete song',function(obj){
      console.log(obj);
      models.vote.destroy({
        where:{
          songId: obj.song,
          partyId: obj.party
        }
      }).then(function(data){
        console.log("vote deletes");
        models.song.destroy({
          where:{
            id: obj.song,
            partyId: obj.party
          }
        }).then(function(data){
          console.log("sending deleted socket");
          io.emit('deleted song',obj);
        });
      });
    });
  });
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
