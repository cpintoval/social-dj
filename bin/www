#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('social-dj:server');
var http = require('http');
var models = require("../models");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server and socket
 */

var server = http.createServer(app);
var io = require('socket.io')(server);

/**
 * Listen on provided port, on all network interfaces.
 */

models.sequelize.sync().then(function () {



  // models.song.destroy({where:{}});
  // models.party.destroy({where:{}});
  // models.dj.destroy({where:{}});
  // // Seed
  // models.dj.create({
  //   name: "Tony",
  //   password: "fakepassword",
  //   email: "dj@email.com"
  // }).then(function(user) {
  //   models.party.create({
  //     name: "The Party",
  //     active: true,
  //     djId: user.id
  //   }).then(function(party) {

  //     models.song.create({
  //       title: "Song 1",
  //       album: "Dummy Album",
  //       artist: "Dummy Artist",
  //       voteCount: 1,
  //       img_url: "https://upload.wikimedia.org/wikipedia/en/6/6b/Portishead_-_Dummy.png",
  //       spotify_id: "abc",
  //       partyId: party.id
  //     });

  //     models.song.create({
  //       title: "Dummy Song",
  //       album: "Dummy Album 2",
  //       artist: "Dummy Artist",
  //       voteCount: 1,
  //       img_url: "https://upload.wikimedia.org/wikipedia/en/6/6b/Portishead_-_Dummy.png",
  //       spotify_id: "abc",
  //       partyId: party.id
  //     });

  //     models.song.create({
  //       title: "Back to Back",
  //       album: "Back to Back",
  //       artist: "Drake",
  //       voteCount: 1,
  //       img_url: "https://theauthoritydjs.files.wordpress.com/2015/08/drake_back_2_back-front.jpg",
  //       spotify_id: "spotify:track:5lFDtgWsjRJu8fPOAyJIAK",
  //       partyId: party.id
  //     });

  //   });
  // });

  server.listen(port, function() {
    console.log('Server listening on port ' + port + '...');
  });
  server.on('error', onError);
  server.on('listening', onListening);

  io.on('connection', function(socket) {
    console.log('user connected');

    socket.on('disconnect', function() {
      console.log('user disconnected');
    });

    socket.on('new song', function(obj) {
      var nsp = io.of('/' + obj.party);
      if(obj.song){
        // console.log(obj);
        models.song.findAll({
          where: {
            spotify_id: obj.song.href,
            partyId: obj.party
          }
        }).then(function(response) {
          if (response.length === 0) {
            models.song.create({
              title: obj.song.name,
              album: obj.song.album.name,
              artist: obj.song.artists[0].name,
              voteCount: 0,
              img_url: "",
              spotify_id: obj.song.href,
              partyId: obj.party
            }).then(function(song) {
              
              nsp.emit('new song', song);
            });
          }
          else {
            // Vote for the song
            var song = response[0];
            song.increment('voteCount').then(function(resp) {
              nsp.emit('new song', song);
            });
          }
        });
      } else {
        nsp.emit('error');
      }
    });

    socket.on('new vote',function(obj){
      console.log(obj);
      models.vote.findAll({
        where:{
          songId: obj.song,
          partyId: obj.party,
          cookie: obj.cookie
        }
      }).then(function(response){
        if (response.length === 0){
          console.log(obj.party,obj.song);
          models.vote.create({
            partyId: obj.party,
            songId: obj.song,
            cookie: obj.cookie
          });
          models.song.findAll({
            where: {
            id: obj.song,
            partyId: obj.party
            }
          }).then(function(response){
            var song = response[0];
            song.increment('voteCount').then(function(res){
            io.emit('new vote',res);
            });
          });
        } else{
          console.log("already voted!");
        }
      });
    });
  });
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
